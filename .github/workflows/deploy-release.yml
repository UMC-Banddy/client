name: Deploy to S3 + CloudFront (release)

on:
  push:
    branches: ["release"]
  workflow_dispatch:

# 동시 실행 방지 (배포는 순차로)
concurrency:
  group: deploy-release
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: |
          npm ci --no-audit || npm install --no-audit

      - name: Build
        env:
          NODE_OPTIONS: --max_old_space_size=4096
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  deploy:
    name: Deploy (S3 sync + CloudFront Invalidate)
    needs: build
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      S3_BUCKET: ${{ secrets.AWS_S3_BUCKET_NAME }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.AWS_CLOUDFRONT_ID }}
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install AWS CLI v2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Upload static assets (long-cache) except HTML
        run: |
          aws s3 sync dist s3://$S3_BUCKET \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "*.html"

      - name: Upload HTML (no-cache for zero-downtime SPA)
        run: |
          aws s3 cp dist s3://$S3_BUCKET \
            --recursive \
            --exclude "*" \
            --include "*.html" \
            --cache-control "no-cache, no-store, must-revalidate" \
            --content-type "text/html"

      - name: Create CloudFront invalidation
        if: ${{ env.CLOUDFRONT_DISTRIBUTION_ID != '' }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
            --paths "/*"

      - name: Output deployment info
        run: |
          echo "Deployed to s3://$S3_BUCKET (region: $AWS_REGION)"
          if [ -n "$CLOUDFRONT_DISTRIBUTION_ID" ]; then
            echo "CloudFront invalidation requested for distribution: $CLOUDFRONT_DISTRIBUTION_ID"
          fi
