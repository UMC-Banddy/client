name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, feat/*]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "18"

jobs:
  # 코드 품질 검사
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

  # 빌드 및 테스트
  build:
    runs-on: ubuntu-latest
    name: Build Application
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL || 'http://localhost:8080' }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  # Vercel 배포 (개발/스테이징)
  deploy-vercel:
    runs-on: ubuntu-latest
    name: Deploy to Vercel (Staging)
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: "--prod"

      - name: Notify Vercel deployment
        if: success()
        run: |
          echo "✅ Vercel staging deployment successful!"
          echo "URL: https://${{ secrets.VERCEL_PROJECT_ID }}.vercel.app"

  # AWS S3 + CloudFront 배포 (프로덕션)
  deploy-aws:
    runs-on: ubuntu-latest
    name: Deploy to AWS (Production)
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: |
          aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }} --delete

      - name: Invalidate CloudFront cache
        if: secrets.CLOUDFRONT_DISTRIBUTION_ID != ''
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Notify deployment success
        if: success()
        run: |
          echo "🚀 Production deployment successful!"
          echo "URL: https://${{ secrets.DOMAIN_NAME }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Production deployment failed!"
          exit 1

  # 배포 상태 알림
  notify:
    runs-on: ubuntu-latest
    name: Deployment Notification
    needs: [deploy-vercel, deploy-aws]
    if: always() && (needs.deploy-vercel.result != 'skipped' || needs.deploy-aws.result != 'skipped')

    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.deploy-vercel.result }}" == "success" ]]; then
            echo "✅ **Vercel Staging**: Success" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-vercel.result }}" == "failure" ]]; then
            echo "❌ **Vercel Staging**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.deploy-aws.result }}" == "success" ]]; then
            echo "✅ **AWS Production**: Success" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-aws.result }}" == "failure" ]]; then
            echo "❌ **AWS Production**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
